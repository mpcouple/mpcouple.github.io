<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker 命令参考</title>
      <link href="/2025/01/25/Docker%20%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83/"/>
      <url>/2025/01/25/Docker%20%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="1-2-Docker基本命令"><a href="#1-2-Docker基本命令" class="headerlink" title="1.2 Docker基本命令"></a>1.2 Docker基本命令</h1><h3 id="1-2-1-查看-Dcoker-版本"><a href="#1-2-1-查看-Dcoker-版本" class="headerlink" title="1.2.1 查看 Dcoker 版本"></a>1.2.1 查看 Dcoker 版本</h3><p>查看 Dcoker 版本包括 Docker版本号、API 版本号、对应的 Git Commit、Containcrd 和 runC 的版本信息等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Cloud integration: v1.0.33</span><br><span class="line"> Version:           24.0.2</span><br><span class="line"> API version:       1.43</span><br><span class="line"> Go version:        go1.20.4</span><br><span class="line"> Git commit:        cb74dfc</span><br><span class="line"> Built:             Thu May 25 21:51:16 2023</span><br><span class="line"> OS/Arch:           darwin/arm64</span><br><span class="line"> Context:           desktop-linux</span><br><span class="line"></span><br><span class="line">Server: Docker Desktop 4.20.1 (110738)</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          24.0.2</span><br><span class="line">  API version:      1.43 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.20.4</span><br><span class="line">  Git commit:       659604f</span><br><span class="line">  Built:            Thu May 25 21:50:59 2023</span><br><span class="line">  OS/Arch:          linux/arm64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.21</span><br><span class="line">  GitCommit:        3dce8eb055cbb6872793272b4f20ed16117344f8</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.7</span><br><span class="line">  GitCommit:        v1.1.7-0-g860f061</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><h3 id="1-2-2-查看-Dcoker-详细信息"><a href="#1-2-2-查看-Dcoker-详细信息" class="headerlink" title="1.2.2 查看 Dcoker 详细信息"></a>1.2.2 查看 Dcoker 详细信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker info</span></span><br><span class="line">Client:       # Client端</span><br><span class="line"> Version:    24.0.2</span><br><span class="line"> Context:    desktop-linux</span><br><span class="line"> Debug Mode: false      # 是否开启 Debug 模式</span><br><span class="line"> Plugins:       # 个人环境中的插件</span><br><span class="line">  buildx: Docker Buildx (Docker Inc.)</span><br><span class="line">    Version:  v0.10.5</span><br><span class="line">    Path:     /Users/bytedance/.docker/cli-plugins/docker-buildx</span><br><span class="line">  compose: Docker Compose (Docker Inc.)</span><br><span class="line">    Version:  v2.18.1</span><br><span class="line">    Path:     /Users/bytedance/.docker/cli-plugins/docker-compose</span><br><span class="line">  dev: Docker Dev Environments (Docker Inc.)</span><br><span class="line">    Version:  v0.1.0</span><br><span class="line">    Path:     /Users/bytedance/.docker/cli-plugins/docker-dev</span><br><span class="line">  extension: Manages Docker extensions (Docker Inc.)</span><br><span class="line">    Version:  v0.2.19</span><br><span class="line">    Path:     /Users/bytedance/.docker/cli-plugins/docker-extension</span><br><span class="line">  init: Creates Docker-related starter files for your project (Docker Inc.)</span><br><span class="line">    Version:  v0.1.0-beta.4</span><br><span class="line">    Path:     /Users/bytedance/.docker/cli-plugins/docker-init</span><br><span class="line">  sbom: View the packaged-based Software Bill Of Materials (SBOM) for an image (Anchore Inc.)</span><br><span class="line">    Version:  0.6.0</span><br><span class="line">    Path:     /Users/bytedance/.docker/cli-plugins/docker-sbom</span><br><span class="line">  scan: Docker Scan (Docker Inc.)</span><br><span class="line">    Version:  v0.26.0</span><br><span class="line">    Path:     /Users/bytedance/.docker/cli-plugins/docker-scan</span><br><span class="line">  scout: Command line tool for Docker Scout (Docker Inc.)</span><br><span class="line">    Version:  v0.12.0</span><br><span class="line">    Path:     /Users/bytedance/.docker/cli-plugins/docker-scout</span><br><span class="line"></span><br><span class="line">Server:         # Server端</span><br><span class="line"> Containers: 0    # 容器个数</span><br><span class="line">  Running: 0      # 正在运行的容器个数</span><br><span class="line">  Paused: 0       # 暂停的容器个数</span><br><span class="line">  Stopped: 0      # 停止的容器个数</span><br><span class="line"> Images: 5        # 镜像个数</span><br><span class="line"> Server Version: 24.0.2       # 当前服务器 Docker Server 的版本</span><br><span class="line"> Storage Driver: overlay2     # 存储驱动，一般为 overlay2，性能好速度快</span><br><span class="line">                              # 其他驱动 aufs、overlay、brtfs</span><br><span class="line">  Backing Filesystem: extfs   # 服务器文件系统</span><br><span class="line">  Supports d_type: true       # 目录条目类型，用来表示一个文件是文件、管道还是套接字。</span><br><span class="line">                              # 在格式化 xfs 文件系统时，必须指定 ftype=1</span><br><span class="line">  Using metacopy: false</span><br><span class="line">  Native Overlay Diff: true</span><br><span class="line">  userxattr: false</span><br><span class="line"> Logging Driver: json-file    # 日志驱动，json-file 表示存在本地</span><br><span class="line"> Cgroup Driver: cgroupfs      # 限制和隔离的驱动，生产环境建议使用 systemd</span><br><span class="line"> Cgroup Version: 2</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: local</span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog   # Docker支持的日志驱动</span><br><span class="line"> Swarm: inactive      # Docker官方的容器编排工具，inactive不开启，active开启</span><br><span class="line"> Runtimes: io.containerd.runc.v2 runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: 3dce8eb055cbb6872793272b4f20ed16117344f8</span><br><span class="line"> runc version: v1.1.7-0-g860f061</span><br><span class="line"> init version: de40ad0</span><br><span class="line"> Security Options:</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: builtin</span><br><span class="line">  cgroupns</span><br><span class="line"> Kernel Version: 5.15.49-linuxkit-pr</span><br><span class="line"> Operating System: Docker Desktop</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: aarch64</span><br><span class="line"> CPUs: 4</span><br><span class="line"> Total Memory: 7.667GiB</span><br><span class="line"> Name: docker-desktop</span><br><span class="line"> ID: 3967aff3-ef2e-4400-8454-c25ef54214b6</span><br><span class="line"> Docker Root Dir: /var/lib/docker     # Docker根目录，生产环境建议使用SSD硬盘，或者独立的磁盘，不要和系统盘用同一个磁盘。</span><br><span class="line"> Debug Mode: false</span><br><span class="line"> HTTP Proxy: http.docker.internal:3128</span><br><span class="line"> HTTPS Proxy: http.docker.internal:3128</span><br><span class="line"> No Proxy: hubproxy.docker.internal</span><br><span class="line"> Experimental: false</span><br><span class="line"> Insecure Registries:</span><br><span class="line">  hubproxy.docker.internal:5555</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Live Restore Enabled: false      # Docker热更新，生产环境建议设置为true</span><br></pre></td></tr></table></figure><h3 id="1-2-3-搜索镜像"><a href="#1-2-3-搜索镜像" class="headerlink" title="1.2.3 搜索镜像"></a>1.2.3 搜索镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker search nginx(镜像名称)</span></span><br><span class="line">NAME                               DESCRIPTION                                      STARS     OFFICIAL   AUTOMATED</span><br><span class="line">nginx                              Official build of Nginx.                         19549     [OK]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="1-2-4-拉取-下载镜像"><a href="#1-2-4-拉取-下载镜像" class="headerlink" title="1.2.4 拉取&#x2F;下载镜像"></a>1.2.4 拉取&#x2F;下载镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull harbor.xxx.net/frontend:v1</span></span><br><span class="line">拉取公网上的Nging镜像：</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull nginx（不指定版本号默认为latest）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull nginx:1.21（指定版本号为1.21）</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">a5573528b1f0: Pull complete </span><br><span class="line">8897d65c8417: Pull complete </span><br><span class="line">fbc138d1d206: Pull complete </span><br><span class="line">06f386eb9182: Pull complete </span><br><span class="line">aeb2f3db77c3: Pull complete </span><br><span class="line">64fb762834ec: Pull complete </span><br><span class="line">e5a7e61f6ff4: Pull complete </span><br><span class="line">Digest: sha256:4c0fdaa8b6341bfdeca5f18f7837462c80cff90527ee35ef185571e1c327beac</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br></pre></td></tr></table></figure><h3 id="1-2-5-查看本地镜像"><a href="#1-2-5-查看本地镜像" class="headerlink" title="1.2.5 查看本地镜像"></a>1.2.5 查看本地镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx        latest    6c7be49d2a11   3 months ago   192MB</span><br></pre></td></tr></table></figure><h3 id="1-2-6-更改镜像-tag"><a href="#1-2-6-更改镜像-tag" class="headerlink" title="1.2.6 更改镜像 tag"></a>1.2.6 更改镜像 tag</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker tag nginx:latest nginx-v2:1.1</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx-v2     1.1       6c7be49d2a11   3 months ago   192MB</span><br><span class="line">nginx        latest    6c7be49d2a11   3 months ago   192MB</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker rmi nginx-v2:1.1</span></span><br></pre></td></tr></table></figure><h3 id="1-2-7-镜像仓库登陆"><a href="#1-2-7-镜像仓库登陆" class="headerlink" title="1.2.7 镜像仓库登陆"></a>1.2.7 镜像仓库登陆</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker login</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">logout</span></span></span><br></pre></td></tr></table></figure><h3 id="1-2-8-推送本地镜像到远程仓库"><a href="#1-2-8-推送本地镜像到远程仓库" class="headerlink" title="1.2.8 推送本地镜像到远程仓库"></a>1.2.8 推送本地镜像到远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker push 路径/镜像名称</span></span><br></pre></td></tr></table></figure><h3 id="1-2-9-启动容器"><a href="#1-2-9-启动容器" class="headerlink" title="1.2.9 启动容器"></a>1.2.9 启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用 run -it 前台启动一个容器</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it nginx bash（bash是启动时的shell）</span></span><br><span class="line">root@8975c95675ad:/#</span><br><span class="line">如果一个镜像需要一直运行，可以使用-d 进行后台启动:</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -itd nginx bash</span></span><br><span class="line">ad53bd99822ba9ce116bf7a2d49a2428cbda6303cdb6af73b21d22749f245abf</span><br><span class="line">也可以使用--restart=always，如果容器异常自动重启</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED         STATUS         PORTS     NAMES</span><br><span class="line">ad53bd99822b   nginx     &quot;/docker-entrypoint.…&quot;   8 seconds ago   Up 7 seconds   80/tcp    competent_sanderson</span><br></pre></td></tr></table></figure><h3 id="1-2-10-端口映射"><a href="#1-2-10-端口映射" class="headerlink" title="1.2.10 端口映射"></a>1.2.10 端口映射</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it -p 1234:80 nginx bash</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -itd -p 1234:80 nginx bash</span></span><br></pre></td></tr></table></figure><h3 id="1-2-11-查看日志"><a href="#1-2-11-查看日志" class="headerlink" title="1.2.11 查看日志"></a>1.2.11 查看日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker logs -f 容器ID/容器名称 --<span class="built_in">tail</span></span> </span><br><span class="line">172.17.0.1 - - [31/Jan/2024:06:14:35 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><h3 id="1-2-12-查看容器详细信息"><a href="#1-2-12-查看容器详细信息" class="headerlink" title="1.2.12 查看容器详细信息"></a>1.2.12 查看容器详细信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker inspect 容器ID</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;ad53bd99822ba9ce116bf7a2d49a2428cbda6303cdb6af73b21d22749f245abf&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2024-01-30T07:24:17.87695363Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/docker-entrypoint.sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;bash&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">....</span><br><span class="line">&quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1-2-13-查看当前运行的容器"><a href="#1-2-13-查看当前运行的容器" class="headerlink" title="1.2.13 查看当前运行的容器"></a>1.2.13 查看当前运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED        STATUS        PORTS                  NAMES</span><br><span class="line">d6c106baa008   nginx     &quot;/docker-entrypoint.…&quot;   4 hours ago    Up 4 hours    0.0.0.0:1234-&gt;80/tcp   eloquent_carson</span><br><span class="line">ad53bd99822b   nginx     &quot;/docker-entrypoint.…&quot;   23 hours ago   Up 23 hours   80/tcp                 competent_sanderson</span><br></pre></td></tr></table></figure><p>查看所有容器，包括已经退出的容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps -a</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>查看正在运行的容器，只显示容器ID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps -q</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>查看所有容器的ID，包括已经退出的容器ID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps -aq</span></span><br><span class="line">d6c106baa008</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="1-2-14-删除已经退出的容器记录"><a href="#1-2-14-删除已经退出的容器记录" class="headerlink" title="1.2.14 删除已经退出的容器记录"></a>1.2.14 删除已经退出的容器记录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">rm</span> 容器ID</span></span><br><span class="line">eba229c7c0ae</span><br></pre></td></tr></table></figure><h3 id="1-2-15-进入到一个后台运行的容器"><a href="#1-2-15-进入到一个后台运行的容器" class="headerlink" title="1.2.15 进入到一个后台运行的容器"></a>1.2.15 进入到一个后台运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it 容器ID bash</span></span><br><span class="line">root@9e8cc59e0c97:/#</span><br></pre></td></tr></table></figure><h3 id="1-2-16-停止-启动容器"><a href="#1-2-16-停止-启动容器" class="headerlink" title="1.2.16 停止&#x2F;启动容器"></a>1.2.16 停止&#x2F;启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker stop 容器ID</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker start 容器ID</span></span><br></pre></td></tr></table></figure><h3 id="1-2-17-文件拷贝"><a href="#1-2-17-文件拷贝" class="headerlink" title="1.2.17 文件拷贝"></a>1.2.17 文件拷贝</h3><p>将本机的文件拷贝到容器，拷贝支持双向拷贝，也支持将容器的内部文件拷贝到宿主机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">cp</span> <span class="built_in">test</span>/index.html 34a793d26866:/usr/share/nginx/html/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">cp</span> 34a793d26866:/usr/share/nginx/html/index.html .</span></span><br></pre></td></tr></table></figure><h3 id="1-2-18-数据持久化"><a href="#1-2-18-数据持久化" class="headerlink" title="1.2.18 数据持久化"></a>1.2.18 数据持久化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -itd -v /Users/bytedance/test:/usr/share/nginx/html -p 1234:80 nginx</span></span><br><span class="line">f35aae1e06702312db253a3afd521759d17c42f7fb37a61a66a689549d8ad87a</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;这是一个测试文件。&quot;</span> &gt; <span class="built_in">test</span>/index.html</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl 0.0.0.0:1234</span></span><br></pre></td></tr></table></figure><h1 id="1-3-DockerFile-的编写"><a href="#1-3-DockerFile-的编写" class="headerlink" title="1.3 DockerFile 的编写"></a>1.3 DockerFile 的编写</h1><h3 id="1-3-1-Dockerfile-的常用命令"><a href="#1-3-1-Dockerfile-的常用命令" class="headerlink" title="1.3.1 Dockerfile 的常用命令"></a>1.3.1 Dockerfile 的常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM: 继承基础镜像</span><br><span class="line">ENV: 配置环境变量</span><br><span class="line">RUN: 用来执行shell命令</span><br><span class="line">EXPOSE: 暴露端口号</span><br><span class="line">WORKDIR: 设置容器的工作目录</span><br><span class="line">CMD: 启动容器默认执行的命令，会被覆盖</span><br><span class="line">ENTRYPOINT: 启动容器真正执行的命令，不会被覆盖</span><br><span class="line">ADD: 复制文件到容器，一般拷贝文件，压缩包自动解压</span><br><span class="line">COPY: 复制文件到容器，一般拷贝目录</span><br><span class="line">USER: 容器使用的用户</span><br><span class="line">MAINTAINER: 镜像制作作者的信息，已弃用，使用LABEL替代</span><br><span class="line">LABEL: k=v形式，将一些元数据添加至镜像</span><br><span class="line">ARG: 设置编译镜像时传入的参数</span><br></pre></td></tr></table></figure><h3 id="1-3-2-构建镜像"><a href="#1-3-2-构建镜像" class="headerlink" title="1.3.2 构建镜像"></a>1.3.2 构建镜像</h3><p>使用 docker build 通过 Dockerfile 制作镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim Dockerfile</span></span><br><span class="line">FROM alpine </span><br><span class="line">RUN touch mjj</span><br><span class="line">COPY Dockerfile .</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t <span class="built_in">test</span>:1.1 .</span> </span><br><span class="line">test ： 镜像名称</span><br><span class="line">1.1 ：镜像版本</span><br><span class="line">. ：当前目录的Dockerfile文件，可以指定绝对路径</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it <span class="built_in">test</span>:1.1 <span class="built_in">ls</span></span></span><br><span class="line">通过简单的dockerfile build，可以查看到镜像执行后的结果。</span><br></pre></td></tr></table></figure><h3 id="1-3-3-CMD-和-ENTRYPOINT-的区别"><a href="#1-3-3-CMD-和-ENTRYPOINT-的区别" class="headerlink" title="1.3.3 CMD 和 ENTRYPOINT 的区别"></a>1.3.3 CMD 和 ENTRYPOINT 的区别</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编写dockerfile文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim dockerfile-cmd</span></span><br><span class="line">FROM centos:7</span><br><span class="line">RUN mkdir test &amp;&amp; touch test/testfile</span><br><span class="line">WORKDIR test/</span><br><span class="line">CMD [&quot;ls&quot;,&quot;-l&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建景象</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -f dockerfile-cmd -t docker:cmd .</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行镜像</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --<span class="built_in">rm</span> docker:cmd</span> </span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root root 0 Feb 18 06:00 testfile</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --<span class="built_in">rm</span> docker:cmd bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 docker run 后面加上其他参数后，CMD指定的参数就会被覆盖</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改dockerfile文件内容CMD为ENTRYPOINT后，直接运行</span></span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-l&quot;]</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --<span class="built_in">rm</span> docker:entrypoint</span></span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root root 0 Feb 18 06:00 testfile</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --<span class="built_in">rm</span> docker:entrypoint -a</span></span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 2 root root 4096 Feb 18 06:00 .</span><br><span class="line">drwxr-xr-x 1 root root 4096 Feb 18 06:06 ..</span><br><span class="line">-rw-r--r-- 1 root root    0 Feb 18 06:00 testfile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 docker run 后面加上其他参数后，ENTRYPOINT指定的参数不会被覆盖</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ENTRYPOINT 指定--entrypoint 参数，比如指定 entrypoint 为 <span class="built_in">ls</span>，后置命令为/tmp，就相当于 ENTRYPOINT 是 <span class="built_in">ls</span>，CMD 是/tmp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --<span class="built_in">rm</span> --entrypoint docker:entrypoint /tmp</span></span><br><span class="line">ks-script-us3cG8</span><br><span class="line">yum.log</span><br></pre></td></tr></table></figure><h3 id="1-3-4-COPY-和-ADD-的区别"><a href="#1-3-4-COPY-和-ADD-的区别" class="headerlink" title="1.3.4 COPY 和 ADD 的区别"></a>1.3.4 COPY 和 ADD 的区别</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编写dockerfile文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> dockerfile-copy</span> </span><br><span class="line">FROM centos:7</span><br><span class="line">RUN mkdir test</span><br><span class="line">WORKDIR test/</span><br><span class="line">COPY dockerfile-cmd.tar.gz .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建后并直接运行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --<span class="built_in">rm</span> docker:copy <span class="built_in">ls</span></span> </span><br><span class="line">dockerfile-cmd.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行后是一个压缩的文件</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改dockerfile文件内容COPY为ADD后，直接运行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --<span class="built_in">rm</span> docker:copy <span class="built_in">ls</span></span> </span><br><span class="line">dockerfile-cmd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行后是一个解压后的文件</span></span><br></pre></td></tr></table></figure><h3 id="1-3-5-定义作者信息"><a href="#1-3-5-定义作者信息" class="headerlink" title="1.3.5 定义作者信息"></a>1.3.5 定义作者信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim Dockerfile</span> </span><br><span class="line">FROM centos:7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MAINTAINER dot <span class="comment">#即将废弃</span></span></span><br><span class="line">LABEL maintainer=&quot;bot&quot; version=&quot;test&quot;</span><br><span class="line">LABEL multiple=&quot;true&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过inspect查看作者信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker inspect docker:label | grep Label  -A 10</span> </span><br><span class="line">&quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;maintainer&quot;: &quot;bot&quot;,</span><br><span class="line">                &quot;multiple&quot;: &quot;true&quot;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="1-3-6-Dockerfile-传参"><a href="#1-3-6-Dockerfile-传参" class="headerlink" title="1.3.6 Dockerfile 传参"></a>1.3.6 Dockerfile 传参</h3><p>使用 ARG 和 build-arg 传入动态变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim Dockerfile</span></span><br><span class="line">FROM centos:7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MAINTAINER dot <span class="comment">#即将废弃</span></span></span><br><span class="line">LABEL maintainer=&quot;bot&quot; version=&quot;test&quot;</span><br><span class="line">LABEL multiple=&quot;true&quot;</span><br><span class="line">ARG USERNAME</span><br><span class="line">ARG DIR=&quot;defaultValue&quot;</span><br><span class="line">RUN useradd -m $USERNAME -u 1001 &amp;&amp; mkdir $DIR</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build --build-arg USERNAME=<span class="string">&quot;mjj&quot;</span> -t docker:arg .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">tail</span> -1 /etc/passwd</span></span><br><span class="line">mjj:x:1001:1001::/home/mjj:/bin/bash</span><br></pre></td></tr></table></figure><h3 id="1-3-7-镜像大小优化"><a href="#1-3-7-镜像大小优化" class="headerlink" title="1.3.7 镜像大小优化"></a>1.3.7 镜像大小优化</h3><p>基础镜像体积较大时建议使用alpine进行构建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以使用 docker <span class="built_in">history</span> 看一下每个层的大小:</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">history</span> 镜像ID</span></span><br><span class="line">IMAGE          CREATED          CREATED BY                                       SIZE      COMMENT</span><br><span class="line">56ddf721d406   13 minutes ago   COPY Dockerfile . # buildkit                     45B       buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      14 minutes ago   RUN /bin/sh -c touch mjj # buildkit              0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      8 days ago       /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot;]               0B        </span><br><span class="line">&lt;missing&gt;      8 days ago       /bin/sh -c #(nop) ADD file:d0764a717d1e9d0af…   7.73MB </span><br></pre></td></tr></table></figure><h3 id="1-3-8-多阶段构建"><a href="#1-3-8-多阶段构建" class="headerlink" title="1.3.8 多阶段构建"></a>1.3.8 多阶段构建</h3><p>创建一个 Go 语言 Hello World 程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim hello.go</span></span><br><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">   fmt.Println(&quot;Hello World!&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单阶段构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim Dockerfile</span></span><br><span class="line">FROM golang:1.14.4-alpine</span><br><span class="line">LABEL maintainer=&quot;bot&quot; version=&quot;test&quot;</span><br><span class="line">LABEL multiple=&quot;true&quot;</span><br><span class="line">WORKDIR /opt</span><br><span class="line">COPY hello.go /opt/</span><br><span class="line">RUN go build /opt/hello.go</span><br><span class="line">CMD [ &quot;./hello&quot; ]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行构建测试并查看镜像大小</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it --<span class="built_in">rm</span> image:one</span> </span><br><span class="line">Hello World!</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker images</span> </span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED              SIZE</span><br><span class="line">image        one       13ce4e84660d   About a minute ago   366MB</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以看到此时镜像大小为 366MB，但是上述的代码只需要构建步骤产生的二进制文件 hello 即可，这个文件大小可以进入到容器内部看一下:</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -lh</span></span><br><span class="line">total 2M     </span><br><span class="line">-rwxr-xr-x    1 root     root        2.1M Feb 18 08:12 hello</span><br></pre></td></tr></table></figure><p>多阶段构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim Dockerfile</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译步骤过程</span></span><br><span class="line">FROM golang:1.14.4-alpine as builder</span><br><span class="line">LABEL maintainer=&quot;bot&quot; version=&quot;test&quot;</span><br><span class="line">LABEL multiple=&quot;true&quot;</span><br><span class="line">WORKDIR /opt</span><br><span class="line">COPY hello.go /opt/</span><br><span class="line">RUN go build /opt/hello.go</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成应用镜像过程</span></span><br><span class="line">FROM alpine:3.12</span><br><span class="line">COPY --from=builder /opt/hello .</span><br><span class="line">CMD [ &quot;./hello&quot; ]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次构建后查看此时的镜像大小和运行镜像的效果:</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t image:two .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it --<span class="built_in">rm</span> image:two</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">image        two       11f7c42e183e   2 minutes ago    7.49MB</span><br><span class="line">image        one       13ce4e84660d   34 minutes ago   366MB</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol><li>相应命令需要多加练习。</li><li>容器每次启动，都会以最干净的状态进行启动。</li><li>笔记参考来源：<a href="https://edu.51cto.com/lecturer/11062970.html">https://edu.51cto.com/lecturer/11062970.html</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始进入Kubernetes的世界</title>
      <link href="/2025/01/24/%E5%BC%80%E5%A7%8B%E8%BF%9B%E5%85%A5Kubernetes%E7%9A%84%E4%B8%96%E7%95%8C/"/>
      <url>/2025/01/24/%E5%BC%80%E5%A7%8B%E8%BF%9B%E5%85%A5Kubernetes%E7%9A%84%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<p>Kubernetes-生产级别的容器编排系统<br>Kubernetes也成为K8s，是谷歌开发的第三个容器管理系统，适用于自动部署、扩缩和管理容器化应用的开源系统。</p><p>Kubernets特性:</p><ul><li>全自动容灾机制</li><li>全自动扩缩容回滚</li><li>服务发现与负载均衡</li></ul><p>包括一些资源调度&#x2F;自我修复&#x2F;存储编排&#x2F;批量执行和ipv4和ipv6地址的支持等。<br>它将组成应用程序的容器组合成逻辑单元，以便于管理和服务发现。Kubernetes源自Google 15年生产环境的运维经验。在相应的生产环境中，Etcd Cluster及Master建议至少部署三台以上，Etcd Cluster建议使用SSD磁盘，可能会有性能跟不上的问题，在保障数据安全的基础上，也要避免部署台数为偶数，否则会出现脑裂的情况。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/01/24/hello-world/"/>
      <url>/2025/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
